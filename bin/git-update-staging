#!/usr/bin/ruby

require 'tempfile'
require 'fileutils'

# Usage: git-update-staging <client> <feature_branch>
#
# Updates the staging deploy targets (for all staging apps, including resque and
# performance) of the designated client with the designated feature branch name
# and then commits and pushes this change.
#
class StagingDeployTargetUpdater
  def initialize
    @client = ARGV[0]
    @feature_branch = ARGV[1]
    @current_branch = `git rev-parse --abbrev-ref HEAD`.chomp
    @deploy_file_path = "#{FileUtils.pwd}/clients/#{client}/config/deploy.rb"
    @temp_file = Tempfile.new("#{client}_deploy")
  end

  def call
    validate_number_of_args
    validate_current_branch
    validate_deploy_file_path
    update_staging_targets_in_deploy_file
    commit_and_push
  end

  private

  attr_reader :client,
              :feature_branch,
              :current_branch,
              :deploy_file_path,
              :temp_file

  def validate_number_of_args
    return if ARGV.size == 2
    warn 'Invalid number of arguments. This script requires two arguments: ' \
          'the client name and the feature branch name.'
    exit(64)
  end

  def validate_current_branch
    return if ['master', 'eligibility-master'].include? current_branch
    warn 'Invalid branch. Please run this from the master or ' \
          'eligibility-master branch.'
    exit(64)
  end

  def validate_deploy_file_path
    return if File.file?(deploy_file_path)
    warn 'Invalid client name. It seems this client does not exist.'
    exit(1)
  end

  def update_staging_targets_in_deploy_file
    write_new_deploy_file
    temp_file.close
    FileUtils.mv(temp_file.path, deploy_file_path)
  ensure
    temp_file.close
    temp_file.unlink
  end

  def write_new_deploy_file
    # Why to do it this way: http://stackoverflow.com/a/4399299
    File.open(deploy_file_path, 'r') do |deploy_file|
      current_task = nil
      deploy_file.each_line do |line|
        current_task = set_current_task(line, current_task)
        write_next_line(line, current_task)
      end
    end
  end

  def set_current_task(line, current_task)
    task_match = line.scan(/(?<=task :)(.*)(?= do)/)[0]
    task_match.nil? ? current_task : task_match[0]
  end

  def write_next_line(line, current_task)
    if current_task == 'staging'
      temp_file.puts line.gsub(/(?<=set :branch, ('|"))(.*)(?=('|"))/,
                               feature_branch)
    else
      temp_file.puts line
    end
  end

  def commit_and_push
    unless system("git commit --no-verify -am '[no ci] " \
                  "Update #{client} staging deploy target'")
      warn "\nCommit failed, resetting branch to original state..."
      `git reset HEAD --hard`
      exit(1)
    end

    return if system('git push')
    warn "\nPush failed, resetting branch to original state..."
    `git reset HEAD^ --hard`
    exit(1)
  end
end

StagingDeployTargetUpdater.new.call
